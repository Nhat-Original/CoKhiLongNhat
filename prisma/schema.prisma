generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          ROLE      @default(STANDARD)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id             String    @id @default(cuid())
  name           String    @unique @db.VarChar(255)
  simplifiedName String    @unique @db.VarChar(255)
  description    String?
  isPublished    Boolean   @default(false)
  products       Product[]
}

model Product {
  id             String         @id @default(cuid())
  categoryId     String?
  name           String         @unique @db.VarChar(255)
  simplifiedName String         @unique @db.VarChar(255)
  description    String?        @db.Text
  status         PRODUCT_STATUS @default(AVAILABLE)
  price          BigInt?
  quantity       Int?
  unit           String?        @db.VarChar(20)
  isPublished    Boolean        @default(false)
  category       Category?      @relation(fields: [categoryId], references: [id])
  productImages  ProductImage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  product   Product @relation(fields: [productId], references: [id])
}

enum ROLE {
  STANDARD
  ADMIN
}

enum PRODUCT_STATUS {
  AVAILABLE
  UNAVAILABLE
}
